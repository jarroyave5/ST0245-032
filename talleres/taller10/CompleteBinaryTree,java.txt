/**
 * Write a description of class TreeBinary here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class BinaryTree
{
  public static Node root;
  public static boolean buscar(int n){      
    return buscarAux(root, n);
  }  
	/**
	* @param node es la raíz del arbol
	* @param n el data del nodo que se busca
	* nota: metodo recursivo.
	* Inserta un dato respetando claro las desigualdades en el árbol
	* @return true si se encuentra el elemento en el árbol, false de lo contrario
	*/ 
  private static boolean buscarAux(Node node, int n){
    Node Aux = node;
    while(Aux != null){
     if (Aux == null){
        return false;
     }
     else{      
         if(Aux.dato == n){
           return true;
         }        
         if(Aux.dato < n){           
           Aux = Aux.derecha;          
         }else{         
           Aux = Aux.izquierda;
         }        
     }      
    }
    return false;
  }
  public void insertar(int n) {
    insertarAux(root, n);
  }    
  /**
   * @param node es la raíz del arbol
   * @param n el data del nodo que se busca insertar
   * nota: metodo recursivo.
   * Inserta un dato respetando claro las desigualdades en el árbol
  */
  private void insertarAux(Node node, int n){
    Node Aux = node;
    if(Aux == null){
      node = new Node(n);
    }
    while(Aux != null){
      if(Aux.dato > n){           
         Aux = Aux.izquierda;
         if(Aux == null){
           node = new Node(n);
         }
      }
      if(Aux.dato < n){
         Aux = Aux.derecha;
         if(Aux == null){
           node = new Node(n);
         }
      }
    }      
  }  
  public static void main(String args[]){
    BinaryTree arbol = new BinaryTree();
    Node nodo1 = new Node(1);
    Node nodo2 = new Node(2);
    Node nodo3 = new Node(3);
    nodo1.izquierda = nodo2;
    nodo1.derecha = nodo3;
    arbol.root = nodo1;
    System.out.println(BinaryTree.buscar(3));
  }
}